version: "3.8"

networks:
  rest-api-network:
  redis-network:
  kafka-network:

services:

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    restart: "always"
    environment:
      KAFKA_CLUSTERS_0_NAME: "bitnami-kafka-cluster-1"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - kafka
    networks:
      - kafka-network

  kafka:
    restart: always
    image: docker.io/bitnami/kafka:3.5
    networks:
      - kafka-network
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      # KRaft settings
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

  redis:
    image: docker.io/bitnami/redis:7.0
    restart: always
    networks:
      - redis-network
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes
      # - REDIS_PASSWORD=root
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    ports:
      - "6378:6379"
    volumes:
      - "redis_data:/bitnami/redis/data"

  nginx:
    restart: always
    build:
      context: ./apps/nginx
      dockerfile: ./Dockerfile
    ports:
      - "8000:80"
    depends_on:
      - rest-api
    networks:
      - rest-api-network

  rest-api:
    restart: always
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.PROD
    deploy:
      replicas: 2
    tty: true
    environment:
      - BUILD_FILE=apps/rest-api/dist/main.js
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - APP_PORT=3000
    # ports:
    #   - '3000'
    depends_on:
      - redis
      - kafka
    networks:
      - rest-api-network
      - kafka-network
      - redis-network

  redis-driver-bridge:
    restart: always
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.PROD
    environment:
      - BUILD_FILE=apps/redis-driver-bridge/dist/main.js
      - KAFKA_CLIENT_CONFIG_VALUE={"clientId":"redis-driver_kafka-bridge","brokers":["kafka:9092"]}
      - HTTP_CLIENT_CONFIG_VALUE={"baseURL":"https://postman-echo.com", "url":"/post"} 
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - APP_PORT=3000
    # ports:
    #   - '3000'
    deploy:
      replicas: 5
    depends_on:
      - redis
      - kafka
    networks:
      - kafka-network
      - redis-network

  redis-queue-failed:
    restart: always
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.PROD
    environment:
      - BUILD_FILE=apps/redis-queue-failed/dist/main.js
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - APP_PORT=3000
    # ports:
    #   - '3000'
    deploy: # must me one cron job
      replicas: 1
    depends_on:
      - redis
      - kafka
    networks:
      - kafka-network
      - redis-network

volumes:
  kafka_data:
    driver: local
  redis_data:
    driver: local
